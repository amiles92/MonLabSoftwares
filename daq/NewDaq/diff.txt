diff --git a/daq/NewDaq/daqModule.py b/daq/NewDaq/daqModule.py
index f4f2d87..f77236c 100644
--- a/daq/NewDaq/daqModule.py
+++ b/daq/NewDaq/daqModule.py
@@ -379,11 +379,14 @@ def analyseData(data,figname):
    
     chStatus=readCh_en+trigCh_en
     nEv = len(data)
-    dataSave=["BEGINHEADER",chStatus,daqStart,daqEnd,nEv,maxSamples]
     waveforms={}
-  
+    #WaveformNSamples = preSamps + postSamps
+    #nReadChannels = np.sum(readCh_en)
+    #waveforms = np.zeros((nReadChannels*nEv,WaveformNSamples)) 
     #### Convert data from digits to mV
+    print("Before analysis loop") 
     for i in range(nEv):
+        count = 0
         for ch in range(4):
             if readCh_en[ch]==False: continue
             
@@ -394,6 +397,8 @@ def analyseData(data,figname):
                 waveforms=np.transpose(adc2mVChMax)
             else:
                 waveforms=np.vstack([waveforms,np.transpose(adc2mVChMax)])
+            #waveforms([i*nReadChannels+count])=np.transpose(adc2mVChMax)
+            #print(len(waveforms[i*nReadChannels+count]))
             
             if ch==0:
                 ax1.plot(timeX, adc2mVChMax[:]-baseline)
@@ -403,15 +408,16 @@ def analyseData(data,figname):
                 ax3.plot(timeX, adc2mVChMax[:]-baseline)
             if ch==3:
                 ax4.plot(timeX, adc2mVChMax[:]-baseline)
+            count=count+1
 
-    dataSave.append(waveforms)
+    print("After analysis loop") 
+    dataSave[0:7]=np.array([["BEGINHEADER"],[chStatus],[daqStart],[daqEnd],[nEv],[maxSamples],[waveforms]])
     ax1.set_xlabel('Time (ns)')
     ax1.set_ylabel('Voltage (mV)')
     ax1.set_xlim(-1,(cmaxSamples.value) * tint + 1)
     ax2.set_xlabel('Time (ns)')
     ax2.set_ylabel('Voltage (mV)')
     ax2.set_xlim(-1,(cmaxSamples.value) * tint + 1)
-
    
     ax3.set_xlabel('Time(ns)')
     ax3.set_ylabel('Voltage(mV)')
@@ -420,7 +426,7 @@ def analyseData(data,figname):
     ax4.set_ylabel('Voltage (mV)')
     ax4.set_xlim(-1,(cmaxSamples.value) * tint + 1)
 
-
+    print("Save figure") 
     fig.savefig(homeDir+'/Desktop/'+figname)
     plt.close(fig)
     
@@ -461,9 +467,10 @@ def run_daq(sub,Settings,Stat,RetStats,Ind):
     SStop = "Stop_"+Device
     status[SStop]=pm.StopScope(chandle,Device)
     assert_pico_ok(status[SStop])
-    dataSave = {}
+    dataSave = np.array([[],[],[],[],[],[],[]])
     print("Analysing and saving data from device ", Device)
     analyseData(data,"fig_pico_"+Device+".png")
+    print("Save")
     np.save(ofile,dataSave,allow_pickle=True)
     ofile.close
     print("Subrun complete in device ",Device)
